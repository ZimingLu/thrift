//
#include <thrift/transport/TBufferTransports.h> 
//This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Photo.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <iostream>
#include <fstream>
#include <string.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class PhotoHandler : virtual public PhotoIf {
 public:
  PhotoHandler() {
    // Your initialization goes here
  }

  bool SendPhoto(const std::string& write_buffer, const int32_t buffer_size) {
    // Your implementation goes here
    printf("SendPhoto\n");
    FILE *f = fopen("server.jpg","wb+");
        if(f){
          fwrite(write_buffer.c_str(),1,buffer_size,f);
          fclose(f);
    for(unsigned int i = 0; i < 60;i++)
                {
                    printf("%02x ",(unsigned char)write_buffer[i]);
                    if (i%16 == 15)
                    {
                        printf("\n");
                    }
                }
    fseek(f,0,SEEK_END);
            int size1 = ftell(f);
      std::cout << std::endl << size1 <<std::endl;
    return true;
      }
    return false;
  }
};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<PhotoHandler> handler(new PhotoHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new PhotoProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

