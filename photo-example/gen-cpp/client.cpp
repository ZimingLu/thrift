//
#include <thrift/transport/TBufferTransports.h> 
//This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Photo.h"
#include <thrift/transport/TSocket.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <iostream>
#include <fstream>
#include <string.h>

using namespace std;
using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;

using std::shared_ptr;

int main(int argc, char **argv){
  std::shared_ptr<TSocket> socket(new TSocket("localhost", 9090));
  std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
  std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));


  transport->open();
  PhotoClient client(protocol);

  // char* photo = new char[20];
  char photo[] = "cat.jpg";
  cout << "input the photo:" << endl;
  // photo = (char*)malloc(sizeof(char)*20);
  // scanf("%s",photo);

  FILE *f = fopen(photo,"rb");
  fseek(f,0,SEEK_END);
  int size = ftell(f);
  char *buf = new char[size];
  memset(buf,0,size);
  fseek(f,0,SEEK_SET);
  // int nRead=fread(buf,sizeof(char),size,f);
  fread(buf,sizeof(char),size,f);
  bool isRight = client.SendPhoto(string(buf,size),size);
  cout << isRight << endl;

  transport->close();
  return 0;
}
